import com.android.build.OutputFile

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
    }

    kotlinOptions.jvmTarget = "1.8"

//    task luaPlaylistCopy(type: Copy) {
//        from '../vlc/share/lua/playlist'
//        into 'assets/lua/playlist'
//        exclude '**/*.txt'
//    }
//
//    task luaMetaCopy(type: Copy) {
//        from '../vlc/share/lua/meta'
//        into 'assets/lua/meta'
//        exclude '**/*.txt'
//    }

    compileSdkVersion rootProject.ext.compileSdkVersion

    dataBinding {
        enabled = true
    }

    defaultConfig {
        // applicationId rootProject.ext.appId

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
        resValue 'string', 'tv_provider_authority', "${applicationId}.tv"

        testInstrumentationRunner "org.videolan.vlc.MultidexTestRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.vlcVersionCode
        versionName rootProject.ext.vlcVersionName
        vectorDrawables.useSupportLibrary = true

        /*tasks.whenTaskAdded { task ->
            if (task.name.startsWith('merge')) {
                task.dependsOn luaPlaylistCopy
                task.dependsOn luaMetaCopy
            }
        }*/

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/assets/schemas".toString(),
                             "room.incremental":"true"]
            }
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            jvmArgs '-noverify'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

    buildTypes {
        release {
            signingConfig null
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            kotlinOptions.freeCompilerArgs = ['-Xno-param-assertions']
            buildConfigField "boolean", "BETA", isBeta()
        }
        debug {
            jniDebuggable true
            buildConfigField "boolean", "BETA", "false"
        }
    }

    sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src']
        resources.srcDirs = ['src']
        aidl.srcDirs = ['src']
        renderscript.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
    }
    sourceSets.test {
        java.srcDirs = ['test', 'test-common']
        assets.srcDirs = ['flavors/debug/assets']
    }
    sourceSets.androidTest {
        java.srcDirs = ['androidTest', 'test-common']
        assets.srcDirs = ['flavors/debug/assets']
        assets.srcDirs += files("$projectDir/assets/schemas".toString())
    }
}

task generateSources(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task buildTranslationArray {
    doLast {
        def foundLocales = new StringBuilder()
        foundLocales.append("new String[]{")

        fileTree("res").visit { FileVisitDetails details ->
            println 'details: ' + details
            if (details.file.path.endsWith("strings.xml")) {
                def languageCode = details.file.parentFile.name.replaceAll('values-', '').replaceAll('-r', '-')
                languageCode = (languageCode == "values") ? "en" : languageCode
                foundLocales.append("\"").append(languageCode).append("\"").append(",")
            }
        }

        foundLocales.append("}")
        //Don't forget to remove the trailing comma
        def foundLocalesString = foundLocales.toString().replaceAll(',}', '}')
        android.defaultConfig.buildConfigField "String[]", "TRANSLATION_ARRAY", foundLocalesString
    }
}
preBuild.dependsOn buildTranslationArray

dependencies {
    implementation "org.videolan.android:libvlc-all:$rootProject.ext.libvlcVersion"
    implementation "org.videolan.android:medialibrary-all:$rootProject.ext.medialibraryVersion"
    implementation project(':api')
    implementation project(':tools')
    implementation project(':resources')

    // AppCompat
    implementation "androidx.activity:activity-ktx:$rootProject.ext.androidxActivityVersion"
    implementation "androidx.fragment:fragment-ktx:$rootProject.ext.androidxFragmentVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.ext.androidxRecyclerviewVersion"
    implementation "com.google.android.material:material:$rootProject.ext.androidxMaterialVersion"
    implementation "androidx.annotation:annotation:$rootProject.ext.androidxAnnotationVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintLayoutVersion"
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.ext.archVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.ext.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.ext.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.ext.lifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$rootProject.ext.lifecycleVersion"
    implementation "androidx.room:room-runtime:$rootProject.ext.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.ext.roomVersion"
    implementation "androidx.paging:paging-runtime-ktx:$rootProject.ext.pagingVersion"

    //TV
    implementation "androidx.leanback:leanback:$rootProject.ext.androidxLeanbackVersion"
    implementation "androidx.leanback:leanback-preference:$rootProject.ext.androidxLeanbackVersion"
    implementation "androidx.tvprovider:tvprovider:$rootProject.ext.androidxLeanbackVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.ext.kotlinx_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.ext.kotlinx_version"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$rootProject.ext.retrofit"
    implementation "com.squareup.moshi:moshi-adapters:$rootProject.ext.moshi"

    // Tests
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.ext.roomVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.ext.archVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.ext.archVersion"
    androidTestImplementation "androidx.test.ext:junit:1.1.1" //$rootProject.ext.supportTest"
    androidTestUtil "androidx.test:orchestrator:$rootProject.ext.supportTest"
    testImplementation "androidx.test:core:$rootProject.ext.supportTest"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.ext.kotlinx_version"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockito"
    testImplementation "io.mockk:mockk:$rootProject.ext.mockk"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.ext.powerMock"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMock"
    testImplementation "com.jraska.livedata:testing-ktx:$rootProject.ext.livedataTest"
    testImplementation "org.robolectric:robolectric:$rootProject.ext.robolectric"
    androidTestImplementation 'androidx.test:rules:1.3.0-alpha03'
    implementation project(path: ':moviepedia')
}


static def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

static def hostName() {
    return "${System.getProperty("user.name")}@${InetAddress.localHost.hostName}"
}

def revision() {
    def code = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code
    }
    return code.toString()
}

def isBeta() {
    def versionNameLower = vlcVersionName.toLowerCase()
    return (versionNameLower.contains("beta") || versionNameLower.contains("rc") || versionNameLower.contains("alpha") || versionNameLower.contains("dev")).toString()
}


kapt {
    javacOptions {
        // Increase the max count of errors from annotation processors.
        // Default is 100.
        option("-Xmaxerrs", 500)
    }
}
